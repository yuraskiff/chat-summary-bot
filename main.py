import os
import logging
import asyncio
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web

from bot.handlers.user_handlers import router as user_router
from bot.handlers.chat_handlers import router as chat_router
from bot.handlers.admin_handlers import router as admin_router, setup_scheduler
from bot.middleware.auth_middleware import AuthMiddleware

from db.db import init_pool, close_pool
from config.config import BOT_TOKEN, PORT

load_dotenv()

# –õ–æ–≥–∏
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logging.getLogger("aiogram.client.session").setLevel(logging.ERROR)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
dp.message.middleware(AuthMiddleware())

# –í–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(user_router)
dp.include_router(chat_router)
dp.include_router(admin_router)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è health-check
async def health(request: web.Request) -> web.Response:
    return web.Response(text="OK")

# –°–∏–≥–Ω–∞–ª—ã —Å—Ç–∞—Ä—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
async def on_startup(app: web.Application):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    try:
        await init_pool()
        logging.info("‚úÖ –ü—É–ª –ë–î —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î: {e}")
        return

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ—Å–≤–æ–¥–æ–∫
    setup_scheduler(dp)

    # –õ–æ–≥–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    for route in app.router.routes():
        logging.info("–ú–∞—Ä—à—Ä—É—Ç: %s %s -> %s", route.method, route.resource, route.handler)

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è webhook
    host = os.getenv('RENDER_EXTERNAL_HOSTNAME') or os.getenv('WEBHOOK_HOST')
    if not host:
        logging.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω —Ö–æ—Å—Ç –¥–ª—è webhook (RENDER_EXTERNAL_HOSTNAME –∏–ª–∏ WEBHOOK_HOST)")
        return
    webhook_path = f"/webhook/{BOT_TOKEN}"
    url = f"https://{host}{webhook_path}"
    logging.info("‚ñ∂ –ò—Å–ø–æ–ª—å–∑—É–µ–º WEBHOOK_URL: %s", url)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    try:
        await bot.set_webhook(url)
        logging.info("üöÄ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", url)
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

async def on_shutdown(app: web.Application):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º webhook
    await bot.delete_webhook()
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î –∏ —Å–µ—Å—Å–∏–∏
    await close_pool()
    await bot.session.close()
    logging.info("üõë –ë–æ—Ç –∏ –ë–î –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É")

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
app = web.Application()
app.router.add_get('/', health)
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º webhook —Ö—ç–Ω–¥–ª–µ—Ä Aiogram
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=f"/webhook/{BOT_TOKEN}")

# –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
if __name__ == '__main__':
    host = '0.0.0.0'
    port = int(os.getenv('PORT', PORT))
    web.run_app(app, host=host, port=port)
