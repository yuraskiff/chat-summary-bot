# --- START OF FILE main.py ---

import os
import logging
import sys
from dotenv import load_dotenv
from typing import Callable, Dict, Any, Awaitable
from aiogram import Bot, Dispatcher, F, BaseMiddleware
from aiogram.types import Update, Message
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
from bot.handlers import user_handlers, chat_handlers, admin_handlers
# from bot.middleware.auth_middleware import AuthMiddleware

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
try:
    from db.db import init_pool, close_pool
    from config.config import BOT_TOKEN, WEBHOOK_HOST, WEBHOOK_PATH, PORT, ADMIN_CHAT_ID
except (ImportError, ValueError) as e:
     logging.basicConfig(level=logging.CRITICAL, format="%(asctime)s - %(levelname)s - %(message)s")
     logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
     sys.exit(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# ----> –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å DEBUG –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ª–æ–≥–≥–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç <----
logging.basicConfig(
    level=logging.DEBUG, # –°—Ç–∞–≤–∏–º DEBUG, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    format="%(asctime)s - %(levelname)s - [%(name)s:%(lineno)d] - %(message)s", # –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–º—è –ª–æ–≥–≥–µ—Ä–∞ (name)
    datefmt='%Y-%m-%d %H:%M:%S',
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—ã–≤–æ–¥ –∏–¥–µ—Ç –≤ stdout/stderr (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è Render)
    stream=sys.stdout,
    force=True # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º, –µ—Å–ª–∏ basicConfig —É–∂–µ –≤—ã–∑—ã–≤–∞–ª—Å—è –≥–¥–µ-—Ç–æ
)
# –£–º–µ–Ω—å—à–∞–µ–º "–±–æ–ª—Ç–ª–∏–≤–æ—Å—Ç—å" –±–∏–±–ª–∏–æ—Ç–µ–∫, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º INFO –¥–ª—è aiogram.dispatcher
logging.getLogger("aiogram.client.session").setLevel(logging.INFO)
logging.getLogger("aiogram.webhook.aiohttp_server").setLevel(logging.DEBUG) # DEBUG –¥–ª—è –≤–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä–∞
logging.getLogger("aiogram.dispatcher").setLevel(logging.DEBUG) # DEBUG –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
logging.getLogger("aiohttp.access").setLevel(logging.INFO)
logging.getLogger("apscheduler").setLevel(logging.INFO) # –û—Å—Ç–∞–≤–ª—è–µ–º INFO –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
logging.getLogger("asyncpg").setLevel(logging.INFO) # INFO –¥–ª—è asyncpg

# –õ–æ–≥–≥–µ—Ä –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
logger = logging.getLogger(__name__)


# ----> MIDDLEWARE –° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú <----
class UpdateTypeLoggerMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        logger.debug(f">>> DP Update Middleware: –í—Ö–æ–¥ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID {event.update_id}, —Ç–∏–ø: {type(event).__name__}")
        if isinstance(event, Message):
             log_prefix = ">>> DP Update Middleware:"
             user_info = f"–æ—Ç user_id:{event.from_user.id}" if event.from_user else "–æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
             chat_info = f"–≤ chat_id:{event.chat.id} (—Ç–∏–ø:{event.chat.type})"
             text_info = f"–¢–µ–∫—Å—Ç: '{event.text}'" if event.text else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
             caption_info = f"–ü–æ–¥–ø–∏—Å—å: '{event.caption}'" if event.caption else ""
             logger.debug(f"{log_prefix} –î–µ—Ç–∞–ª–∏ Message: {user_info} {chat_info}. {text_info} {caption_info}")
        try:
            # ----> –î–û–ë–ê–í–õ–ï–ù–û –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ï–î –í–´–ó–û–í–û–ú HANDLER <----
            logger.debug(f">>> DP Update Middleware: –ü–µ—Ä–µ–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID {event.update_id} –¥–∞–ª—å—à–µ –ø–æ —Ü–µ–ø–æ—á–∫–µ...")
            result = await handler(event, data)
            logger.debug(f">>> DP Update Middleware: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID {event.update_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ö—ç–Ω–¥–ª–µ—Ä–æ–º.")
            return result
        except Exception as e:
             logger.exception(f">>> DP Update Middleware: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID {event.update_id}!")
             raise

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bot –∏ Dispatcher ---
try:
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher()
    logger.info("Bot –∏ Dispatcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
except Exception as e:
    logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bot –∏–ª–∏ Dispatcher.")
    sys.exit("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Aiogram.")

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Middleware ---
# dp.message.middleware(AuthMiddleware()) # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
dp.update.middleware(UpdateTypeLoggerMiddleware())
logger.info("UpdateTypeLoggerMiddleware –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–æ –≤—Å–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º (dp.update).")

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ ---
dp.include_router(user_handlers.router)
dp.include_router(chat_handlers.router)
dp.include_router(admin_handlers.router)
logger.info("–†–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã: user, chat, admin.")

# --- –§—É–Ω–∫—Ü–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

async def health_check(request: web.Request) -> web.Response:
    logger.debug("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ health_check (/)")
    return web.Response(text="OK")

async def on_startup(app: web.Application):
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è on_startup...")
    current_bot = app.get('bot') or bot

    try:
        await init_pool()
    except Exception as e:
        logger.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î –≤ on_startup: {e}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        raise web.GracefulExit() from e

    try:
        admin_handlers.setup_scheduler(current_bot)
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ on_startup: {e}")

    webhook_host = os.getenv("RENDER_EXTERNAL_HOSTNAME") or WEBHOOK_HOST
    if not webhook_host:
        logger.critical("‚ùå –ù–µ –∑–∞–¥–∞–Ω —Ö–æ—Å—Ç –¥–ª—è webhook (RENDER_EXTERNAL_HOSTNAME –∏–ª–∏ WEBHOOK_HOST)")
        raise web.GracefulExit("Webhook host is not set")

    webhook_url = f"https://{webhook_host}{WEBHOOK_PATH}"
    logger.info(f"‚ñ∂ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WEBHOOK_URL: {webhook_url}")

    try:
        used_update_types = dp.resolve_used_update_types()
        # ----> –î–û–ë–ê–í–õ–ï–ù–û –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¢–ò–ü–û–í –û–ë–ù–û–í–õ–ï–ù–ò–ô <----
        logger.info(f"–¢–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º: {used_update_types}")
        await current_bot.set_webhook(
            webhook_url,
            allowed_updates=used_update_types
        )
        logger.info(f"üöÄ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logger.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook ({webhook_url}): {e}")
        raise web.GracefulExit() from e
    logger.info("–§—É–Ω–∫—Ü–∏—è on_startup –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def on_shutdown(app: web.Application):
    logger.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è on_shutdown...")
    current_bot = app.get('bot') or bot

    logger.info("–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞...")
    try:
        webhook_info = await current_bot.get_webhook_info()
        if webhook_info.url:
            await current_bot.delete_webhook()
            logger.info("Webhook —É–¥–∞–ª–µ–Ω.")
        else:
            logger.info("–í–µ–±—Ö—É–∫ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")

    await close_pool()

    logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞...")
    await current_bot.session.close()
    logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
    logger.info("üõë –§—É–Ω–∫—Ü–∏—è on_shutdown –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def main():
    app = web.Application()
    app.router.add_get("/", health_check)

    webhook_request_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_request_handler.register(app, path=WEBHOOK_PATH)
    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ Telegram –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—É—Ç–∏: {WEBHOOK_PATH}")

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    listen_host = "0.0.0.0"
    listen_port = PORT
    logger.info(f"–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{listen_host}:{listen_port}")
    try:
        web.run_app(app, host=listen_host, port=listen_port, print=None)
    except OSError as e:
        logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {listen_port}: {e}")
        sys.exit(f"–ü–æ—Ä—Ç {listen_port} –∑–∞–Ω—è—Ç.")
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
        sys.exit("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞.")

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ main —Ñ—É–Ω–∫—Ü–∏–∏...")
    main()

# --- END OF FILE main.py ---
