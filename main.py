import asyncio
import logging

from aiogram import Bot, Dispatcher

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç—Ä–∏ —Ä–æ—É—Ç–µ—Ä–∞
from bot.handlers.user_handlers import router as user_router
from bot.handlers.chat_handlers import router as chat_router
from bot.handlers.admin_handlers import router as admin_router, setup_scheduler
from bot.middleware.auth_middleware import AuthMiddleware

from config.config import BOT_TOKEN
from db.db import init_pool, close_pool

async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s"
    )
    # –£–º–µ–Ω—å—à–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—å –ª–æ–≥–æ–≤ aiohttp/aiogram
    logging.getLogger("aiogram.client.session").setLevel(logging.ERROR)

    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(BOT_TOKEN, parse_mode="HTML")
    dp  = Dispatcher()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ë–î —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    try:
        await init_pool()
        logging.info("‚úÖ –ü—É–ª –ë–î —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î: %s", e)
        return  # –±–µ–∑ –ë–î –±–æ—Ç –¥–∞–ª—å—à–µ –Ω–µ —Å—Ç–∞—Ä—Ç—É–µ—Ç

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥ –¥–ª—è —á—É–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    dp.message.middleware(AuthMiddleware())

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(user_router)
    dp.include_router(chat_router)
    dp.include_router(admin_router)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ—Å–≤–æ–¥–æ–∫
    setup_scheduler(dp)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –∏ —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("Webhook —É–¥–∞–ª—ë–Ω, —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã.")

    try:
        logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ polling...")
        await dp.start_polling(bot, skip_updates=True)
    finally:
        # –ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–∫–ª—é—á–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –ø—É–ª –∏ —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        sched = dp.get("scheduler")
        if sched:
            sched.shutdown()

        await close_pool()

        # –í aiogram 3.x –ø—Ä–∞–≤–∏–ª—å–Ω–µ–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å session —Ç–∞–∫:
        try:
            await bot.session.close()
        except AttributeError:
            # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π aiogram:
            session = await bot.get_session()
            await session.close()

        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.")

if __name__ == "__main__":
    asyncio.run(main())
