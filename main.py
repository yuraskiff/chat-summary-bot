import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from gpt import generate_summary
from db import init_db, add_group, get_all_groups
from dotenv import load_dotenv
from datetime import datetime, timedelta

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

async def collect_and_summarize(chat_id: int):
    print(f"üìö –°–æ–±–∏—Ä–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã {chat_id}...")
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(days=1)
    history = []

    async for message in bot.get_chat_history(chat_id=chat_id, limit=1000):
        if message.date < start_time:
            break
        if message.text:
            sender = message.from_user.full_name if message.from_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            history.append(f"{sender}: {message.text}")

    if not history:
        await bot.send_message(chat_id, "üòï –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    formatted = "\n".join(history)
    summary = generate_summary(formatted)
    await bot.send_message(chat_id, f"üìù –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç:\n\n{summary}")

@dp.message(F.text == "/summary")
async def summary_command(message: types.Message):
    if message.chat.type not in ["group", "supergroup"]:
        await message.answer("–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return
    await message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é —Å–∞–º–º–∞—Ä–∏, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")
    await collect_and_summarize(chat_id=message.chat.id)
    await add_group(message.chat.id)

async def main():
    await init_db()
    scheduler = AsyncIOScheduler()
    groups = await get_all_groups()
    for group_id in groups:
        scheduler.add_job(collect_and_summarize, 'cron', hour=0, minute=0, args=[group_id])
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


@dp.message(F.text == "/health")
async def health_check(message: types.Message):
    from db import async_session
    try:
        async with async_session() as session:
            await session.execute("SELECT 1")
        await message.answer("‚úÖ –Ø –∂–∏–≤! Telegram –∏ –ë–î –Ω–∞ —Å–≤—è–∑–∏.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ë–î: {e}")

from time import perf_counter
from db import count_groups

async def log_error(bot: Bot, text: str):
    log_chat = os.getenv("LOG_CHAT_ID")
    if log_chat:
        try:
            await bot.send_message(int(log_chat), f"‚ùå –û—à–∏–±–∫–∞:\n{text}")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ª–æ–≥-—á–∞—Ç:", e)

@dp.message(F.text == "/ping")
async def ping_command(message: types.Message):
    start = perf_counter()
    elapsed = (perf_counter() - start) * 1000
    await message.answer(f"üèì Pong! ‚è± {int(elapsed)} ms")

@dp.message(F.text == "/stats")
async def stats_command(message: types.Message):
    try:
        group_count = await count_groups()
        await message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n- –ì—Ä—É–ø–ø –≤ –±–∞–∑–µ: {group_count}")
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        await log_error(bot, str(e))
