# --- START OF FILE main.py ---

import os
import logging
import sys # –î–ª—è sys.exit
from dotenv import load_dotenv

# ----> –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–´ –ò–ú–ü–û–†–¢–´ MIDDLEWARE <----
# from typing import Callable, Dict, Any, Awaitable
# from aiogram import BaseMiddleware # <--- –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
# from aiogram.types import Update, Message # <--- –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ (Message –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö)
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message # –û—Å—Ç–∞–≤–∏–º –∏–º–ø–æ—Ä—Ç Message, –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω –≥–¥–µ-—Ç–æ –µ—â–µ

from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
from bot.handlers import user_handlers, chat_handlers, admin_handlers
# from bot.middleware.auth_middleware import AuthMiddleware # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
try:
    from db.db import init_pool, close_pool
    from config.config import BOT_TOKEN, WEBHOOK_HOST, WEBHOOK_PATH, PORT, ADMIN_CHAT_ID
except (ImportError, ValueError) as e:
     # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –∏–ª–∏ ValueErrors –∏–∑ config.py –Ω–∞ —Å–∞–º–æ–º —Ä–∞–Ω–Ω–µ–º —ç—Ç–∞–ø–µ
     logging.basicConfig(level=logging.CRITICAL, format="%(asctime)s - %(levelname)s - %(message)s")
     logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
     sys.exit(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ (–Ω–∞ —Å–ª—É—á–∞–π –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# –£—Ä–æ–≤–µ–Ω—å DEBUG –æ—Å—Ç–∞–µ—Ç—Å—è, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –ª–æ–≥–∏ aiogram.dispatcher
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - [%(name)s:%(lineno)d] - %(message)s",
    datefmt='%Y-%m-%d %H:%M:%S',
    stream=sys.stdout,
    force=True
)
# –£–º–µ–Ω—å—à–∞–µ–º "–±–æ–ª—Ç–ª–∏–≤–æ—Å—Ç—å" –±–∏–±–ª–∏–æ—Ç–µ–∫, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º DEBUG –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
logging.getLogger("aiogram.client.session").setLevel(logging.INFO)
logging.getLogger("aiogram.webhook.aiohttp_server").setLevel(logging.INFO) # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å INFO
logging.getLogger("aiogram.dispatcher").setLevel(logging.DEBUG) # –û—Å—Ç–∞–≤–ª—è–µ–º DEBUG –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
logging.getLogger("aiohttp.access").setLevel(logging.INFO)
logging.getLogger("apscheduler").setLevel(logging.INFO)
logging.getLogger("asyncpg").setLevel(logging.INFO)

# –õ–æ–≥–≥–µ—Ä –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
logger = logging.getLogger(__name__)


# ----> –ö–õ–ê–°–° MIDDLEWARE –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù <----
# class UpdateTypeLoggerMiddleware(BaseMiddleware):
#     async def __call__(
#         self,
#         handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
#         event: Update, # –õ–æ–≤–∏–º –≤—Å–µ —Ç–∏–ø—ã Update
#         data: Dict[str, Any]
#     ) -> Any:
#         """–õ–æ–≥–∏—Ä—É–µ—Ç —Ç–∏–ø –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
#         # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –µ–≥–æ ID
#         logger.debug(f">>> DP Middleware: –í—Ö–æ–¥ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID {event.update_id}, —Ç–∏–ø: {type(event).__name__}")
#         # –ï—Å–ª–∏ —ç—Ç–æ Message, –ª–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
#         if isinstance(event, Message):
#              log_prefix = ">>> DP Middleware:"
#              user_info = f"–æ—Ç user_id:{event.from_user.id}" if event.from_user else "–æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
#              chat_info = f"–≤ chat_id:{event.chat.id} (—Ç–∏–ø:{event.chat.type})"
#              text_info = f"–¢–µ–∫—Å—Ç: '{event.text}'" if event.text else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
#              caption_info = f"–ü–æ–¥–ø–∏—Å—å: '{event.caption}'" if event.caption else ""
#              logger.debug(f"{log_prefix} –î–µ—Ç–∞–ª–∏ Message: {user_info} {chat_info}. {text_info} {caption_info}")
#         try:
#             # ----> –î–û–ë–ê–í–õ–ï–ù–û –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ï–î –í–´–ó–û–í–û–ú HANDLER <----
#             logger.debug(f">>> DP Middleware: –ü–µ—Ä–µ–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID {event.update_id} –¥–∞–ª—å—à–µ –ø–æ —Ü–µ–ø–æ—á–∫–µ...")
#             result = await handler(event, data)
#             logger.debug(f">>> DP Middleware: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID {event.update_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ö—ç–Ω–¥–ª–µ—Ä–æ–º.")
#             return result
#         except Exception as e:
#              # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
#              logger.exception(f">>> DP Middleware: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID {event.update_id}!")
#              # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–π–º–∞—Ç—å –≤—ã—à–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
#              raise


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bot –∏ Dispatcher ---
try:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º DefaultBotProperties –¥–ª—è parse_mode
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher()
    logger.info("Bot –∏ Dispatcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
except Exception as e:
    logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bot –∏–ª–∏ Dispatcher.")
    sys.exit("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Aiogram.")

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Middleware ---
# dp.message.middleware(AuthMiddleware()) # –û—Å—Ç–∞–≤–ª—è–µ–º AuthMiddleware –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
# ----> –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï MIDDLEWARE –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û <----
# dp.update.middleware(UpdateTypeLoggerMiddleware())
# logger.info("UpdateTypeLoggerMiddleware –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–æ –≤—Å–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º (dp.update).")


# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ ---
dp.include_router(user_handlers.router)
dp.include_router(chat_handlers.router)
dp.include_router(admin_handlers.router)
logger.info("–†–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã: user, chat, admin.")

# --- –§—É–Ω–∫—Ü–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

async def health_check(request: web.Request) -> web.Response:
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞."""
    logger.debug("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ health_check (/)")
    return web.Response(text="OK")

async def on_startup(app: web.Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è on_startup...")
    current_bot = app.get('bot') or bot

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
    try:
        await init_pool()
    except Exception as e:
        logger.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î –≤ on_startup: {e}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        raise web.GracefulExit() from e

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    try:
        admin_handlers.setup_scheduler(current_bot)
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ on_startup: {e}")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    webhook_host = os.getenv("RENDER_EXTERNAL_HOSTNAME") or WEBHOOK_HOST
    if not webhook_host:
        logger.critical("‚ùå –ù–µ –∑–∞–¥–∞–Ω —Ö–æ—Å—Ç –¥–ª—è webhook (RENDER_EXTERNAL_HOSTNAME –∏–ª–∏ WEBHOOK_HOST)")
        raise web.GracefulExit("Webhook host is not set")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –≤–µ–±—Ö—É–∫–∞
    webhook_url = f"https://{webhook_host}{WEBHOOK_PATH}"
    logger.info(f"‚ñ∂ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WEBHOOK_URL: {webhook_url}")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    try:
        # –£–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç—å (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑ dp)
        used_update_types = dp.resolve_used_update_types()
        logger.info(f"–¢–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º: {used_update_types}")
        await current_bot.set_webhook(
            webhook_url,
            allowed_updates=used_update_types
        )
        logger.info(f"üöÄ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logger.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook ({webhook_url}): {e}")
        raise web.GracefulExit() from e
    logger.info("–§—É–Ω–∫—Ü–∏—è on_startup –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def on_shutdown(app: web.Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è on_shutdown...")
    current_bot = app.get('bot') or bot

    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
    logger.info("–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        webhook_info = await current_bot.get_webhook_info()
        if webhook_info.url:
            await current_bot.delete_webhook()
            logger.info("Webhook —É–¥–∞–ª–µ–Ω.")
        else:
            logger.info("–í–µ–±—Ö—É–∫ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
    await close_pool()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞...")
    await current_bot.session.close()
    logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
    logger.info("üõë –§—É–Ω–∫—Ü–∏—è on_shutdown –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞."""
    app = web.Application()

    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è health check
    app.router.add_get("/", health_check)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ Telegram
    webhook_request_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ –ø—É—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    webhook_request_handler.register(app, path=WEBHOOK_PATH)
    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ Telegram –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—É—Ç–∏: {WEBHOOK_PATH}")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ startup –∏ shutdown
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    listen_host = "0.0.0.0"
    listen_port = PORT
    logger.info(f"–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{listen_host}:{listen_port}")
    try:
        web.run_app(app, host=listen_host, port=listen_port, print=None) # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ aiohttp
    except OSError as e:
        logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {listen_port}: {e}")
        sys.exit(f"–ü–æ—Ä—Ç {listen_port} –∑–∞–Ω—è—Ç.")
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
        sys.exit("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞.")

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ main —Ñ—É–Ω–∫—Ü–∏–∏...")
    main()

# --- END OF FILE main.py ---
