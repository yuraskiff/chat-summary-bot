# --- START OF FILE main.py ---

import os
import logging
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
from bot.handlers.user_handlers import router as user_router
from bot.handlers.chat_handlers import router as chat_router
from bot.handlers.admin_handlers import router as admin_router, setup_scheduler
from bot.middleware.auth_middleware import AuthMiddleware

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from db.db import init_pool, close_pool
from config.config import BOT_TOKEN, WEBHOOK_HOST, WEBHOOK_PATH, PORT, ADMIN_CHAT_ID

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - [%(name)s] - %(message)s",
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª:
    # handlers=[
    #     logging.FileHandler("bot.log"),
    #     logging.StreamHandler()
    # ]
)
# –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ª–∏—à–∫–æ–º "–±–æ–ª—Ç–ª–∏–≤—ã—Ö" –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger("aiogram.client.session").setLevel(logging.WARNING)
logging.getLogger("aiohttp.access").setLevel(logging.WARNING)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ ID –∞–¥–º–∏–Ω–∞
if not BOT_TOKEN:
    logging.critical("‚ùå –ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN)")
    exit("BOT_TOKEN is not set")
if not ADMIN_CHAT_ID:
    logging.warning("‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMIN_CHAT_ID). –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware
dp.message.middleware(AuthMiddleware()) # –ü—Ä–∏–º–µ—Ä middleware, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –≤–∞–º –Ω—É–∂–µ–Ω

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
dp.include_router(user_router)
dp.include_router(chat_router)
dp.include_router(admin_router)
logging.info("–†–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (health check)
async def health_check(request: web.Request) -> web.Response:
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ë–î –∏–ª–∏ OpenAI API –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    return web.Response(text="OK")

# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def on_startup(app: web.Application):
    # –í Aiohttp –ø—Ä–∏–Ω—è—Ç–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    # app['bot'] = bot
    # app['dp'] = dp
    # app['config'] = ... –∏ —Ç.–¥. –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
    try:
        await init_pool()
        logging.info("‚úÖ –ü—É–ª –ë–î —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logging.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î: {e}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        raise web.GracefulExit() from e

    # ----> –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ü–ï–†–ï–î–ê–ï–ú bot –í setup_scheduler <----
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    try:
        setup_scheduler(bot)
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {e}")
        # –†–µ—à–∏—Ç–µ, –∫—Ä–∏—Ç–∏—á–Ω–∞ –ª–∏ —ç—Ç–∞ –æ—à–∏–±–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –æ—Ç–¥–∞–µ—Ç—Å—è Render, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π WEBHOOK_HOST
    webhook_host = os.getenv("RENDER_EXTERNAL_HOSTNAME") or WEBHOOK_HOST
    if not webhook_host:
        logging.critical("‚ùå –ù–µ –∑–∞–¥–∞–Ω —Ö–æ—Å—Ç –¥–ª—è webhook (RENDER_EXTERNAL_HOSTNAME –∏–ª–∏ WEBHOOK_HOST)")
        raise web.GracefulExit("Webhook host is not set")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –≤–µ–±—Ö—É–∫–∞
    # WEBHOOK_PATH –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–æ —Å–ª–µ—à–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä /webhook
    webhook_url = f"https://{webhook_host}{WEBHOOK_PATH}"
    logging.info(f"‚ñ∂ –ò—Å–ø–æ–ª—å–∑—É–µ–º WEBHOOK_URL: {webhook_url}")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
        # SECRET_TOKEN = os.getenv("WEBHOOK_SECRET", "your_strong_secret") # –õ—É—á—à–µ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ .env
        # await bot.set_webhook(webhook_url, secret_token=SECRET_TOKEN)
        # –ï—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
        await bot.set_webhook(webhook_url)
        logging.info(f"üöÄ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logging.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")
        raise web.GracefulExit() from e

# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def on_shutdown(app: web.Application):
    logging.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
    try:
        await bot.delete_webhook()
        logging.info("Webhook —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
    await close_pool()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    await bot.session.close()
    logging.info("üõë –ë–æ—Ç –∏ –ë–î –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è aiohttp
app = web.Application()

# –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è health check
app.router.add_get("/", health_check)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ Telegram
# –ü—É—Ç—å –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å WEBHOOK_PATH –∏–∑ config.py
webhook_request_handler = SimpleRequestHandler(
    dispatcher=dp,
    bot=bot,
    # secret_token=os.getenv("WEBHOOK_SECRET", "your_strong_secret") # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–µ–∫—Ä–µ—Ç
)
webhook_request_handler.register(app, path=WEBHOOK_PATH)
logging.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—É—Ç–∏: {WEBHOOK_PATH}")

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ö–µ–ª–ø–µ—Ä–∞ aiogram
# –û–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç 'bot' –∏ 'dp' –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
# setup_application(app, dp, bot=bot)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ startup –∏ shutdown
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    # '0.0.0.0' —Å–ª—É—à–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö (–≤–∞–∂–Ω–æ –¥–ª—è Docker/Render)
    listen_host = "0.0.0.0"
    # PORT –±–µ—Ä–µ—Ç—Å—è –∏–∑ config.py (–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –∏–∑ .env)
    listen_port = int(os.getenv("PORT", PORT))

    logging.info(f"–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {listen_host}:{listen_port}")
    web.run_app(app, host=listen_host, port=listen_port)

# --- END OF FILE main.py ---
