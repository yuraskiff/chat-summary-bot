# --- START OF FILE main.py ---

import os
import logging
import sys # –î–ª—è sys.exit
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
from bot.handlers import user_handlers, chat_handlers, admin_handlers
from bot.middleware.auth_middleware import AuthMiddleware

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
try:
    from db.db import init_pool, close_pool
    from config.config import BOT_TOKEN, WEBHOOK_HOST, WEBHOOK_PATH, PORT, ADMIN_CHAT_ID
except (ImportError, ValueError) as e:
     # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –∏–ª–∏ ValueErrors –∏–∑ config.py –Ω–∞ —Å–∞–º–æ–º —Ä–∞–Ω–Ω–µ–º —ç—Ç–∞–ø–µ
     logging.basicConfig(level=logging.CRITICAL, format="%(asctime)s - %(levelname)s - %(message)s")
     logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
     sys.exit(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ (–Ω–∞ —Å–ª—É—á–∞–π –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
logging.basicConfig(
    level=logging.INFO, # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    format="%(asctime)s - %(levelname)s - [%(name)s:%(lineno)d] - %(message)s",
    datefmt='%Y-%m-%d %H:%M:%S',
    # handlers=[ # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª
    #     logging.FileHandler("bot.log", encoding='utf-8'),
    #     logging.StreamHandler(sys.stdout) # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    # ]
)
# –£–º–µ–Ω—å—à–∞–µ–º "–±–æ–ª—Ç–ª–∏–≤–æ—Å—Ç—å" –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger("aiogram.client.session").setLevel(logging.WARNING)
logging.getLogger("aiohttp.access").setLevel(logging.INFO) # –û—Å—Ç–∞–≤–ª—è–µ–º INFO –¥–ª—è access –ª–æ–≥–æ–≤ aiohttp
logging.getLogger("apscheduler.scheduler").setLevel(logging.INFO)
logging.getLogger("asyncpg").setLevel(logging.WARNING)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bot –∏ Dispatcher ---
try:
    bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
    dp = Dispatcher()
    logging.info("Bot –∏ Dispatcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
except Exception as e:
    logging.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bot –∏–ª–∏ Dispatcher.")
    sys.exit("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Aiogram.")

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Middleware ---
# Middleware –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º Message –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ AuthMiddleware –Ω–∞–ø–∏—Å–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
if ADMIN_CHAT_ID: # –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–¥–º–∏–Ω ID –∑–∞–¥–∞–Ω
    dp.message.middleware(AuthMiddleware())
    logging.info("AuthMiddleware –ø–æ–¥–∫–ª—é—á–µ–Ω.")
else:
    logging.warning("AuthMiddleware –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Ç.–∫. ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω.")

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ ---
dp.include_router(user_handlers.router)
dp.include_router(chat_handlers.router)
dp.include_router(admin_handlers.router)
logging.info("–†–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã: user, chat, admin.")

# --- –§—É–Ω–∫—Ü–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

async def health_check(request: web.Request) -> web.Response:
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞."""
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ë–î –∏ OpenAI, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    return web.Response(text="OK")

async def on_startup(app: web.Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logging.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º setup_application)
    # –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç bot, –∫–∞–∫ —Å–µ–π—á–∞—Å
    current_bot = app.get('bot') or bot # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot –∏–∑ app –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
    try:
        await init_pool()
        logging.info("‚úÖ –ü—É–ª –ë–î —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logging.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î: {e}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        raise web.GracefulExit() from e

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    try:
        admin_handlers.setup_scheduler(current_bot)
    except Exception as e:
        logging.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {e}")
        # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    webhook_host = os.getenv("RENDER_EXTERNAL_HOSTNAME") or WEBHOOK_HOST
    if not webhook_host:
        logging.critical("‚ùå –ù–µ –∑–∞–¥–∞–Ω —Ö–æ—Å—Ç –¥–ª—è webhook (RENDER_EXTERNAL_HOSTNAME –∏–ª–∏ WEBHOOK_HOST)")
        raise web.GracefulExit("Webhook host is not set")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –≤–µ–±—Ö—É–∫–∞
    webhook_url = f"https://{webhook_host}{WEBHOOK_PATH}"
    logging.info(f"‚ñ∂ –ò—Å–ø–æ–ª—å–∑—É–µ–º WEBHOOK_URL: {webhook_url}")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    try:
        # webhook_secret = os.getenv("WEBHOOK_SECRET") # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        await current_bot.set_webhook(
            webhook_url,
            # secret_token=webhook_secret, # –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º
            allowed_updates=dp.resolve_used_update_types() # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        )
        logging.info(f"üöÄ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        logging.info(f"–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {dp.resolve_used_update_types()}")
    except Exception as e:
        logging.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook ({webhook_url}): {e}")
        raise web.GracefulExit() from e

async def on_shutdown(app: web.Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logging.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    current_bot = app.get('bot') or bot

    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
    logging.info("–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞...")
    try:
        await current_bot.delete_webhook()
        logging.info("Webhook —É–¥–∞–ª–µ–Ω.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ app)
    scheduler = app.get('scheduler') # –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    if scheduler and scheduler.running:
         try:
             scheduler.shutdown()
             logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
         except Exception as e:
             logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
    await close_pool()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    logging.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞...")
    await current_bot.session.close()
    logging.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
    logging.info("üõë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É.")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞."""
    app = web.Application()

    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è health check
    app.router.add_get("/", health_check)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ Telegram
    webhook_request_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
        # secret_token=os.getenv("WEBHOOK_SECRET") # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–µ–∫—Ä–µ—Ç
    )
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ –ø—É—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    webhook_request_handler.register(app, path=WEBHOOK_PATH)
    logging.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—É—Ç–∏: {WEBHOOK_PATH}")

    # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å setup_application –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è bot –∏ dp –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç app
    # setup_application(app, dp, bot=bot)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ startup –∏ shutdown
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    listen_host = "0.0.0.0"
    listen_port = PORT
    logging.info(f"–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{listen_host}:{listen_port}")
    try:
        web.run_app(app, host=listen_host, port=listen_port)
    except OSError as e:
        # –õ–æ–≤–∏–º –æ—à–∏–±–∫—É "address already in use"
        logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {listen_port}: {e}")
        sys.exit(f"–ü–æ—Ä—Ç {listen_port} –∑–∞–Ω—è—Ç.")
    except Exception as e:
        logging.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
        sys.exit("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞.")

if __name__ == "__main__":
    main()

# --- END OF FILE main.py ---
