# --- START OF FILE db.py ---

import asyncpg
import logging
from datetime import datetime, timezone
from typing import List, Dict, Optional, Union # –ò—Å–ø–æ–ª—å–∑—É–µ–º typing

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º URL –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞
from config.config import DATABASE_URL

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—É–ª–∞ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
PoolType = Optional[asyncpg.Pool]
pool: PoolType = None

async def init_pool():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã/–∏–Ω–¥–µ–∫—Å—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    global pool
    if pool:
        logging.warning("–ü—É–ª –ë–î —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return
    try:
        logging.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {DATABASE_URL.split('@')[-1]}") # –õ–æ–≥ –±–µ–∑ –ø–∞—Ä–æ–ª—è
        pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=10)
        logging.info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

        async with pool.acquire() as conn:
            logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
            # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS messages (
                    message_internal_id SERIAL PRIMARY KEY, -- –î–æ–±–∞–≤–∏–º –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–π ID –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                    chat_id      BIGINT       NOT NULL,
                    username     TEXT         NOT NULL,
                    text         TEXT         NOT NULL,
                    timestamp    TIMESTAMPTZ  NOT NULL
                );
            """)
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS settings (
                    key   TEXT PRIMARY KEY,
                    value TEXT NOT NULL
                );
            """)
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS chats (
                    chat_id BIGINT PRIMARY KEY
                );
            """)
            logging.info("–¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã.")

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–∫
            logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
            await conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_messages_chat_id_timestamp ON messages (chat_id, timestamp DESC);
            """)
            await conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_messages_timestamp ON messages (timestamp DESC);
            """)
            logging.info("–ò–Ω–¥–µ–∫—Å—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã.")

    except Exception as e:
        logging.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        pool = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—É–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        raise # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã—à–µ

async def close_pool():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î."""
    global pool
    if pool:
        try:
            await pool.close()
            logging.info("üõë –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.")
        except Exception as e:
            logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞ –ë–î: {e}")
        finally:
            pool = None
    else:
        logging.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–ª –ë–î.")


async def _get_connection():
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞."""
    if not pool:
        logging.error("–ü—É–ª –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        raise ConnectionError("Database pool is not initialized")
    return await pool.acquire()

async def _release_connection(conn, exc=None):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ø—É–ª."""
    if pool and conn:
        await pool.release(conn, timeout=5) # –î–∞–µ–º 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç


async def save_message(chat_id: int, username: str, text: str, timestamp: datetime):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è, —á—Ç–æ timestamp —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ aware UTC."""
    conn = None
    try:
        conn = await _get_connection()
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Ä–µ–º—è aware –∏ –≤ UTC –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        if timestamp.tzinfo is None:
            timestamp = timestamp.replace(tzinfo=timezone.utc)
        elif timestamp.tzinfo != timezone.utc:
            timestamp = timestamp.astimezone(timezone.utc)

        await conn.execute(
            """
            INSERT INTO messages(chat_id, username, text, "timestamp")
            VALUES($1, $2, $3, $4)
            """,
            chat_id, username, text, timestamp
        )
        # –£–±—Ä–∞–ª–∏ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ –æ—Ç—Å—é–¥–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –≤—ã–≤–æ–¥
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}: {e}")
    finally:
        if conn: await _release_connection(conn)


async def register_chat(chat_id: int):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —á–∞—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    conn = None
    try:
        conn = await _get_connection()
        result = await conn.execute(
            "INSERT INTO chats(chat_id) VALUES($1) ON CONFLICT(chat_id) DO NOTHING",
            chat_id
        )
        # INSERT 0 1 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞
        if result == "INSERT 0 1":
            logging.info(f"–ß–∞—Ç {chat_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç (—á–∞—Ç —É–∂–µ –µ—Å—Ç—å), result –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–º –∏–ª–∏ –Ω–µ –±—ã—Ç—å,
        # –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞.
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞ {chat_id}: {e}")
    finally:
        if conn: await _release_connection(conn)


async def get_registered_chats() -> List[int]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤."""
    conn = None
    try:
        conn = await _get_connection()
        rows = await conn.fetch("SELECT chat_id FROM chats")
        return [r["chat_id"] for r in rows]
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")
        return [] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    finally:
        if conn: await _release_connection(conn)


async def get_messages_for_summary(chat_id: int, since: datetime) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–∞–º–º–∞—Ä–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (aware UTC)."""
    conn = None
    messages = []
    try:
        conn = await _get_connection()
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ since - aware UTC
        if since.tzinfo is None:
            since = since.replace(tzinfo=timezone.utc)
        elif since.tzinfo != timezone.utc:
            since = since.astimezone(timezone.utc)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å idx_messages_chat_id_timestamp
        rows = await conn.fetch(
            """
            SELECT username, text, "timestamp"
            FROM messages
            WHERE chat_id = $1 AND "timestamp" >= $2
            ORDER BY "timestamp" ASC
            """,
            chat_id, since
        )
        # asyncpg –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç timestamp –∫–∞–∫ aware datetime (–æ–±—ã—á–Ω–æ UTC –¥–ª—è TIMESTAMPTZ)
        messages = [
            {"username": r["username"], "text": r["text"], "timestamp": r["timestamp"]}
            for r in rows
        ]
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–≤–æ–¥–∫–∏ —á–∞—Ç–∞ {chat_id} —Å {since}: {e}")
    finally:
        if conn: await _release_connection(conn)
    return messages


async def get_setting(key: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–ª—é—á—É."""
    conn = None
    try:
        conn = await _get_connection()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fetchval –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ None
        value = await conn.fetchval("SELECT value FROM settings WHERE key = $1", key)
        return value
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '{key}': {e}")
        return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    finally:
        if conn: await _release_connection(conn)


async def set_setting(key: str, value: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    conn = None
    try:
        conn = await _get_connection()
        await conn.execute(
            """
            INSERT INTO settings(key, value)
            VALUES($1, $2)
            ON CONFLICT (key) DO UPDATE SET value = EXCLUDED.value
            """,
            key, value
        )
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '{key}': {e}")
    finally:
        if conn: await _release_connection(conn)

# --- END OF FILE db.py ---
