import asyncpg
import logging
from datetime import timezone
from config.config import DATABASE_URL

pool: asyncpg.Pool | None = None

async def init_pool():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞—ë—Ç –Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã.
    """
    global pool
    try:
        pool = await asyncpg.create_pool(DATABASE_URL)
        logging.info("Database pool initialized successfully.")
        async with pool.acquire() as conn:
            # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS messages (
                    chat_id      BIGINT       NOT NULL,
                    username     TEXT         NOT NULL,
                    text         TEXT         NOT NULL,
                    timestamp    TIMESTAMPTZ  NOT NULL
                );
            """)
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS settings (
                    key   TEXT PRIMARY KEY,
                    value TEXT         NOT NULL
                );
            """)
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS chats (
                    chat_id BIGINT PRIMARY KEY
                );
            """)
    except Exception as e:
        logging.error(f"‚ùå Database connection failed: {e}")
        raise

async def close_pool():
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î.
    """
    global pool
    if pool:
        await pool.close()
        logging.info("üõë Database pool closed successfully.")
        return

async def save_message(chat_id: int, username: str, text: str, timestamp):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É messages.
    """
    try:
        if timestamp.tzinfo is None:
            timestamp = timestamp.replace(tzinfo=timezone.utc)

        async with pool.acquire() as conn:
            await conn.execute(
                """
                INSERT INTO messages(chat_id, username, text, timestamp)
                VALUES($1, $2, $3, $4::timestamptz)
                """,
                chat_id, username, text, timestamp.isoformat()
            )
    except Exception as e:
        logging.error(f"‚ùå Error saving message: {e}")

async def register_chat(chat_id: int):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —á–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ chats.
    """
    try:
        async with pool.acquire() as conn:
            await conn.execute(
                "INSERT INTO chats(chat_id) VALUES($1) ON CONFLICT DO NOTHING",
                chat_id
            )
    except Exception as e:
        logging.error(f"‚ùå Error registering chat: {e}")

async def get_registered_chats() -> list[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ chat_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã chats.
    """
    try:
        async with pool.acquire() as conn:
            rows = await conn.fetch("SELECT chat_id FROM chats")
        return [r["chat_id"] for r in rows]
    except Exception as e:
        logging.error(f"‚ùå Error fetching registered chats: {e}")
        return []

async def get_chat_ids_for_summary(since=None) -> list[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ chat_id –∏–∑ messages —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–µ.
    """
    try:
        async with pool.acquire() as conn:
            if since:
                rows = await conn.fetch(
                    "SELECT DISTINCT chat_id FROM messages WHERE timestamp >= $1",
                    since
                )
            else:
                rows = await conn.fetch("SELECT DISTINCT chat_id FROM messages")
        return [r["chat_id"] for r in rows]
    except Exception as e:
        logging.error(f"‚ùå Error fetching chat IDs for summary: {e}")
        return []

async def get_messages_for_summary(chat_id: int, since) -> list[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥ –ø–æ chat_id.
    """
    try:
        if since.tzinfo is None:
            since = since.replace(tzinfo=timezone.utc)

        async with pool.acquire() as conn:
            rows = await conn.fetch(
                """
                SELECT username, text, timestamp
                FROM messages
                WHERE chat_id = $1 AND timestamp >= $2
                ORDER BY timestamp ASC
                """,
                chat_id, since
            )
        return [
            {"username": r["username"], "text": r["text"], "timestamp": r["timestamp"]}
            for r in rows
        ]
    except Exception as e:
        logging.error(f"‚ùå Error fetching messages for summary: {e}")
        return []

async def get_setting(key: str) -> str | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–ª—é—á—É.
    """
    try:
        async with pool.acquire() as conn:
            row = await conn.fetchrow("SELECT value FROM settings WHERE key = $1", key)
        return row["value"] if row else None
    except Exception as e:
        logging.error(f"‚ùå Error getting setting '{key}': {e}")
        return None

async def set_setting(key: str, value: str):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
    """
    try:
        async with pool.acquire() as conn:
            await conn.execute(
                """
                INSERT INTO settings(key, value)
                VALUES($1, $2)
                ON CONFLICT (key) DO UPDATE SET value = EXCLUDED.value
                """,
                key, value
            )
    except Exception as e:
        logging.error(f"‚ùå Error setting '{key}': {e}")
