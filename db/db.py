# --- START OF FILE db.py ---

import asyncpg
import logging
from datetime import datetime, timezone
from typing import List, Dict, Optional # –ò—Å–ø–æ–ª—å–∑—É–µ–º typing –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config.config import DATABASE_URL

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—É–ª–∞ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
PoolType = Optional[asyncpg.Pool]
pool: PoolType = None

async def init_pool():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã/–∏–Ω–¥–µ–∫—Å—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    global pool
    if pool:
        logging.warning("–ü—É–ª –ë–î —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º —Ö–æ—Å—Ç –ë–î –±–µ–∑ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        db_host_info = DATABASE_URL.split('@')[-1] if '@' in DATABASE_URL else DATABASE_URL
        logging.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {db_host_info}")
        # –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=10, command_timeout=60)
        if not pool:
             # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ create_pool –≤–µ—Ä–Ω–µ—Ç None (—Ö–æ—Ç—è –æ–±—ã—á–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
             logging.critical("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î (pool is None).")
             raise ConnectionError("Failed to create database pool")
        logging.info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏/—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        async with pool.acquire() as conn:
            logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
            # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS messages (
                    message_internal_id SERIAL PRIMARY KEY, -- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
                    chat_id      BIGINT       NOT NULL,
                    username     TEXT         NOT NULL,
                    text         TEXT         NOT NULL,
                    "timestamp"  TIMESTAMPTZ  NOT NULL     -- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–≤—ã—á–∫–∏, —Ç.–∫. timestamp - –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
                );
            """)
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS settings (
                    key   TEXT PRIMARY KEY,
                    value TEXT NOT NULL
                );
            """)
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS chats (
                    chat_id BIGINT PRIMARY KEY
                );
            """)
            logging.info("–¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã.")

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–∫
            logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
            # –ò–Ω–¥–µ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Ç—É –∏ –≤—Ä–µ–º–µ–Ω–∏ (–≤–∞–∂–µ–Ω –¥–ª—è —Å–≤–æ–¥–æ–∫)
            await conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_messages_chat_id_timestamp ON messages (chat_id, "timestamp" DESC);
            """)
            # –ò–Ω–¥–µ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω)
            await conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_messages_timestamp ON messages ("timestamp" DESC);
            """)
            logging.info("–ò–Ω–¥–µ–∫—Å—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã.")

    except Exception as e:
        logging.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        pool = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—É–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        raise # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã—à–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

async def close_pool():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î."""
    global pool
    if pool:
        logging.info("–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î...")
        try:
            await pool.close()
            logging.info("üõë –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.")
        except Exception as e:
            logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞ –ë–î: {e}")
        finally:
            pool = None # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—É–ª
    else:
        logging.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç—ã–π –ø—É–ª –ë–î.")


async def _get_connection() -> asyncpg.Connection:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π."""
    if not pool:
        logging.error("–ü—É–ª –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
        raise ConnectionError("Database pool is not initialized or already closed")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å –≤–µ—á–Ω–æ
        conn = await pool.acquire(timeout=10)
        if not conn:
             raise ConnectionError("Failed to acquire connection from pool (timeout or pool closed)")
        return conn
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞ –ë–î.")
        raise ConnectionError("Failed to acquire connection from pool") from e

async def _release_connection(conn: asyncpg.Connection):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ø—É–ª."""
    if pool and conn and not conn.is_closed():
        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
            await pool.release(conn, timeout=5)
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ø—É–ª: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            try:
                await conn.close()
            except Exception as close_exc:
                 logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {close_exc}")
    elif not pool:
         logging.warning("–ü–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–Ω—É—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—É–ª–µ.")


async def save_message(chat_id: int, username: str, text: str, timestamp: datetime):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è, —á—Ç–æ timestamp —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ aware UTC."""
    conn: Optional[asyncpg.Connection] = None
    try:
        conn = await _get_connection()
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Ä–µ–º—è aware –∏ –≤ UTC –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        if timestamp.tzinfo is None:
            timestamp = timestamp.replace(tzinfo=timezone.utc)
        elif timestamp.tzinfo != timezone.utc:
            timestamp = timestamp.astimezone(timezone.utc)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–≤—ã—á–∫–∏ –¥–ª—è "timestamp", —Ç.–∫. —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ SQL
        await conn.execute(
            """
            INSERT INTO messages(chat_id, username, text, "timestamp")
            VALUES($1, $2, $3, $4)
            """,
            chat_id, username, text, timestamp
        )
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å traceback
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}: {e}")
    finally:
        if conn: await _release_connection(conn)


async def register_chat(chat_id: int):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —á–∞—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    conn: Optional[asyncpg.Connection] = None
    try:
        conn = await _get_connection()
        result = await conn.execute(
            "INSERT INTO chats(chat_id) VALUES($1) ON CONFLICT(chat_id) DO NOTHING",
            chat_id
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã INSERT
        if result == "INSERT 0 1":
            logging.info(f"–ß–∞—Ç {chat_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        # –ï—Å–ª–∏ –±—ã–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç (—á–∞—Ç —É–∂–µ –µ—Å—Ç—å), –ª–æ–≥ –Ω–µ –Ω—É–∂–µ–Ω.
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞ {chat_id}: {e}")
    finally:
        if conn: await _release_connection(conn)


async def get_registered_chats() -> List[int]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤."""
    conn: Optional[asyncpg.Connection] = None
    chats = []
    try:
        conn = await _get_connection()
        rows = await conn.fetch("SELECT chat_id FROM chats")
        chats = [r["chat_id"] for r in rows]
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    finally:
        if conn: await _release_connection(conn)
    return chats


async def get_messages_for_summary(chat_id: int, since: datetime) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–∞–º–º–∞—Ä–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (aware UTC)."""
    conn: Optional[asyncpg.Connection] = None
    messages = []
    try:
        conn = await _get_connection()
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ `since` - aware UTC –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ –∑–∞–ø—Ä–æ—Å
        if since.tzinfo is None:
            logging.warning(f"–ü–æ–ª—É—á–µ–Ω–æ naive datetime ({since}) –≤ get_messages_for_summary, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ UTC.")
            since = since.replace(tzinfo=timezone.utc)
        elif since.tzinfo != timezone.utc:
            logging.warning(f"–ü–æ–ª—É—á–µ–Ω–æ non-UTC aware datetime ({since.tzinfo}) –≤ get_messages_for_summary, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ UTC.")
            since = since.astimezone(timezone.utc)

        # ----> –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–û–ë–ê–í–õ–ï–ù–û ::TIMESTAMPTZ <----
        # –Ø–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ $2 –∫ TIMESTAMPTZ –¥–ª—è PostgreSQL
        rows = await conn.fetch(
            """
            SELECT username, text, "timestamp"
            FROM messages
            WHERE chat_id = $1 AND "timestamp" >= $2::TIMESTAMPTZ
            ORDER BY "timestamp" ASC
            """,
            chat_id, since # –ü–µ—Ä–µ–¥–∞–µ–º —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π aware UTC datetime
        )
        # asyncpg –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç TIMESTAMPTZ –∏–∑ –ë–î –≤ aware datetime (UTC)
        messages = [
            {"username": r["username"], "text": r["text"], "timestamp": r["timestamp"]}
            for r in rows
        ]
    except asyncpg.exceptions.DataError as de:
         # –õ–æ–≤–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –≤—Å–µ –µ—â–µ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ —Ç–µ–ø–µ—Ä—å)
         logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö asyncpg –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–≤–æ–¥–∫–∏ —á–∞—Ç–∞ {chat_id} —Å {since}: {de}. –ê—Ä–≥—É–º–µ–Ω—Ç $2: {since} (tz={since.tzinfo})")
         logging.error(f"–¢–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç–∞ 'since': {type(since)}")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–≤–æ–¥–∫–∏ —á–∞—Ç–∞ {chat_id} —Å {since}: {e}")
    finally:
        if conn: await _release_connection(conn)
    return messages # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏


async def get_setting(key: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–ª—é—á—É."""
    conn: Optional[asyncpg.Connection] = None
    value = None
    try:
        conn = await _get_connection()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fetchval –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ None
        value = await conn.fetchval("SELECT value FROM settings WHERE key = $1", key)
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '{key}': {e}")
    finally:
        if conn: await _release_connection(conn)
    return value # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞


async def set_setting(key: str, value: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    conn: Optional[asyncpg.Connection] = None
    try:
        conn = await _get_connection()
        await conn.execute(
            """
            INSERT INTO settings(key, value)
            VALUES($1, $2)
            ON CONFLICT (key) DO UPDATE SET value = EXCLUDED.value
            """,
            key, value
        )
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '{key}': {e}")
        # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ
        # raise e
    finally:
        if conn: await _release_connection(conn)

# --- END OF FILE db.py ---
