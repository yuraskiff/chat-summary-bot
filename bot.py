import logging
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message
from aiogram.filters import Command
from openrouter import summarize_chat
from db import save_message, get_chat_ids_for_summary, get_messages_for_summary
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timezone, timedelta

router = Router()

@router.message(lambda msg: msg.text and not msg.text.startswith("/"))
async def handle_message(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.chat.id}/{message.from_user.id}: {message.text}")
    await save_message(
        chat_id=message.chat.id,
        username=message.from_user.username or message.from_user.full_name,
        text=message.text,
        timestamp=datetime.now(timezone.utc)
    )

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É —Å–æ–±–∏—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —Å—É—Ç–∫–∏ –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–≤–æ–¥–∫—É. –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å –º–µ–Ω—è –≤ –ª—é–±–æ–π —á–∞—Ç ‚Äî –∏ —è –Ω–∞—á–Ω—É —Ä–∞–±–æ—Ç—É.")

@router.message(Command("summary"))
async def cmd_manual_summary(message: Message):
    await send_summary(message.bot, message.chat.id)

async def send_summary(bot: Bot, chat_id: int):
    since = datetime.now(timezone.utc) - timedelta(days=1)
    msgs = await get_messages_for_summary(chat_id, since)
    if not msgs:
        await bot.send_message(chat_id, "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.")
        return

    try:
        blocks = [f"{m['username']}: {m['text']}" for m in msgs]
        summary = await summarize_chat(blocks)
        await bot.send_message(chat_id, f"üìù –°–≤–æ–¥–∫–∞ –∑–∞ —Å—É—Ç–∫–∏:\n\n{summary}")
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏")
        await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É.")

async def send_summaries_all(bot: Bot):
    since = datetime.now(timezone.utc) - timedelta(days=1)
    chat_ids = await get_chat_ids_for_summary(since)
    for cid in chat_ids:
        await send_summary(bot, cid)

def setup_scheduler(dispatcher: Dispatcher):
    scheduler = AsyncIOScheduler(timezone="Europe/Tallinn")
    scheduler.add_job(
        lambda: dispatcher.loop.create_task(send_summaries_all(dispatcher.bot)),
        'cron', hour=23, minute=59
    )
    scheduler.start()
    dispatcher['scheduler'] = scheduler
