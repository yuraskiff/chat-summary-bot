import logging
from aiogram import Bot, Dispatcher, F
from aiogram.enums.parse_mode import ParseMode
from aiogram.types import Message
from aiogram.filters import CommandStart
from openai import AsyncOpenAI
from os import getenv
from db import save_summary

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
BOT_TOKEN = getenv("BOT_TOKEN")
OPENAI_API_KEY = getenv("OPENAI_API_KEY")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
openai = AsyncOpenAI(api_key=OPENAI_API_KEY)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def handle_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É, –∏ —è —Å–¥–µ–ª–∞—é —Å–∞–º–º–∞—Ä–∏.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
@dp.message(F.text)
async def handle_text(message: Message):
    text = message.text.strip()
    if not text:
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏.")
        return

    await message.reply("‚úçÔ∏è –°–æ–∑–¥–∞—é —Å–∞–º–º–∞—Ä–∏, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏ —á–µ—Ä–µ–∑ OpenAI
        completion = await openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{
                "role": "user",
                "content": f"–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏:\n\n{text}"
            }],
            temperature=0.7,
            max_tokens=300
        )

        summary = completion.choices[0].message.content.strip()

        await save_summary(message.from_user.id, text, summary)

        await message.reply(f"üìå <b>–°–∞–º–º–∞—Ä–∏:</b>\n{summary}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–º–º–∞—Ä–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
