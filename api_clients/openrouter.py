import httpx
import logging
import textwrap
from config.config import OPENROUTER_API_KEY

# –ú–æ–¥–µ–ª—å DeepSeek-Chat-V3-0324 (free) –≤ OpenRouter
MODEL   = "deepseek/deepseek-chat-v3-0324:free"
API_URL = "https://api.openrouter.ai/api/v1/chat/completions"
TIMEOUT = httpx.Timeout(10.0, read=60.0)

async def summarize_chat(chat_history: list[str], user_prompt: str | None = None) -> str | None:
    # –í–æ—Ç –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —Ç–µ–ø–µ—Ä—å –º—ã —Ç–æ—á–Ω–æ —É–≤–∏–¥–∏–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    logging.info("üîî summarize_chat –≤—ã–∑–≤–∞–Ω: history_len=%d, prompt –∑–∞–¥–∞–Ω=%s", len(chat_history), bool(user_prompt))

    system_msg = "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–æ–≤."
    default_prompt = textwrap.dedent("""
        –°–æ–±–µ—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏ —Å–¥–µ–ª–∞–π –∑–∞–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:
        - –¢–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π
        - –ö—Ç–æ –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω/–±–µ—Å–ø–æ–ª–µ–∑–µ–Ω –∏ –ø–æ—á–µ–º—É
        - –ü–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã –±–µ—Å–µ–¥—ã
        - –ö—Ç–æ —á–∞—â–µ –≤—Å–µ—Ö –ø–∏—Å–∞–ª
        - –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã
        - –ö–æ—Ä–æ—Ç–∫–∞—è —à—É—Ç–∫–∞ –Ω–∞ —Ç–µ–º—É –±–µ—Å–µ–¥—ã
    """).strip()

    prompt = user_prompt or default_prompt
    chat_text = "\n".join(chat_history)

    messages = [
        {"role": "system", "content": system_msg},
        {"role": "user",   "content": f"{prompt}\n\n{chat_text}"}
    ]
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    try:
        async with httpx.AsyncClient(timeout=TIMEOUT) as client:
            resp = await client.post(API_URL, json={"model": MODEL, "messages": messages}, headers=headers)
            resp.raise_for_status()
            data = await resp.json()
            logging.info("‚úÖ OpenRouter –æ—Ç–≤–µ—Ç: %s", data)
            return data["choices"][0]["message"]["content"]
    except httpx.HTTPError as e:
        logging.error("‚ùå OpenRouter request error: %s", e)
        return None
    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ OpenRouter: %s", e)
        return None
