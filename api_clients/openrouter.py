# --- START OF FILE api_clients/openrouter.py ---

import httpx
import logging
# import textwrap # <--- –£–î–ê–õ–ï–ù –ù–ï–ù–£–ñ–ù–´–ô –ò–ú–ü–û–†–¢
from typing import List, Optional, Dict
from config.config import OPENROUTER_API_KEY

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
MODEL = "deepseek/deepseek-chat" # –ò–ª–∏ "deepseek/deepseek-chat-v3-0324:free"
API_URL = "https://openrouter.ai/api/v1/chat/completions"
TIMEOUT = httpx.Timeout(10.0, read=60.0)
HEADERS = {
    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    "HTTP-Referer": "https://chat-summary-bot.onrender.com",
    "X-Title": "Chat Summary Bot",
    "Content-Type": "application/json",
}
CONTEXT_MAX_LENGTH = 15000

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–≤–æ–¥–∫–∏ ---
async def summarize_chat(
    chat_history_blocks: List[str],
    system_prompt: Optional[str] = None,
    user_prompt: Optional[str] = None # –≠—Ç–æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù (–∏–ª–∏ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É)
) -> Optional[str]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏ –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ OpenRouter API.
    """
    if not OPENROUTER_API_KEY:
        logging.error("–ö–ª—é—á API OpenRouter (OPENROUTER_API_KEY) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω user_prompt (–∏–∑ admin_handlers –æ–Ω –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞)
    if not user_prompt:
         logging.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π user_prompt –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ summarize_chat.")
         # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å None –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫–æ–π-—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å–Ω–æ–π –ø—Ä–æ–º–ø—Ç
         # return None
         user_prompt = "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å–ª–µ–¥—É—é—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞." # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π fallback

    # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ ---
    final_system_prompt = system_prompt or "–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –∏ –∫—Ä–∞—Ç–∫–æ–º –∏–∑–ª–æ–∂–µ–Ω–∏–∏ (summary) –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –≤ —á–∞—Ç–∞—Ö."
    # ----> –ë–õ–û–ö –° DEFAULT_USER_PROMPT –£–î–ê–õ–ï–ù <----
    # ----> –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ï–†–ï–î–ê–ù–ù–´–ô USER_PROMPT –ù–ê–ü–†–Ø–ú–£–Æ <----
    final_user_prompt = user_prompt

    # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—Å –æ–±—Ä–µ–∑–∫–æ–π) ---
    trimmed_history = ""
    current_length = 0
    for block in reversed(chat_history_blocks):
        block_len = len(block) + 1
        if current_length + block_len <= CONTEXT_MAX_LENGTH:
            trimmed_history = block + "\n" + trimmed_history
            current_length += block_len
        else:
            logging.warning(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ–±—Ä–µ–∑–∞–Ω–∞ –¥–æ ~{current_length} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ ({CONTEXT_MAX_LENGTH}).")
            break

    if not trimmed_history:
        logging.warning("–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API –ø—É—Å—Ç–∞.")
        return None

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API ---
    messages = [
        {"role": "system", "content": final_system_prompt},
        {"role": "user", "content": final_user_prompt},
        {"role": "user", "content": "–í–æ—Ç –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n" + trimmed_history.strip()}
    ]
    request_payload = { "model": MODEL, "messages": messages }

    # --- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ ---
    logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenRouter (–º–æ–¥–µ–ª—å: {MODEL}, —Å–∏–º–≤–æ–ª–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏: ~{current_length})")
    try:
        async with httpx.AsyncClient(timeout=TIMEOUT) as client:
            response = await client.post(API_URL, headers=HEADERS, json=request_payload)
            logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç OpenRouter –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            response.raise_for_status()
            data = response.json()
            if "choices" in data and data["choices"] and "message" in data["choices"][0] and "content" in data["choices"][0]["message"]:
                summary_text = data["choices"][0]["message"]["content"].strip()
                logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å–≤–æ–¥–∫–∞ –æ—Ç –º–æ–¥–µ–ª–∏ '{MODEL}' (–¥–ª–∏–Ω–∞: {len(summary_text)} —Å–∏–º–≤–æ–ª–æ–≤).")
                logging.debug(f"–ù–∞—á–∞–ª–æ —Å–≤–æ–¥–∫–∏: '{summary_text[:100]}...'")
                return summary_text
            else:
                logging.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter: {data}")
                return None
    # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    except httpx.HTTPStatusError as e:
        logging.exception(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –æ—Ç OpenRouter: –°—Ç–∞—Ç—É—Å {e.response.status_code}")
        try: error_details = e.response.json(); logging.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ—Ç OpenRouter: {error_details}")
        except Exception: logging.error(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ: {e.response.text}")
        if e.response.status_code == 429: logging.warning("‚è≥ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ OpenRouter (429).")
        return None
    except httpx.TimeoutException as e:
         logging.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: {e}")
         return None
    except Exception as e:
        logging.exception(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: {e}")
        return None

# --- END OF FILE api_clients/openrouter.py ---
