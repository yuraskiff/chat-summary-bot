import httpx
import logging
import textwrap

from config.config import OPENROUTER_API_KEY

# –ú–æ–¥–µ–ª—å –∏ URL API
MODEL = "deepseek/deepseek-chat-v3-0324:free"
API_URL = "https://api.openrouter.ai/api/v1/chat/completions"
# –¢–∞–π–º–∞—É—Ç—ã: connect=10s, read=60s
TIMEOUT = httpx.Timeout(10.0, read=60.0)


async def summarize_chat(blocks: list[str], prompt: str) -> str | None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ OpenRouter –ø—Ä–æ–º–ø—Ç + —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏ –∏–ª–∏ None.
    """

    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logging.info("‚ñ∂ Summarization prompt:\n%s", textwrap.indent(prompt, "  "))
    logging.info("‚ñ∂ Number of blocks: %d", len(blocks))

    # –ì–æ—Ç–æ–≤–∏–º –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
    payload = {
        "model": MODEL,
        "messages": [{"role": "system", "content": prompt}]
        + [{"role": "user", "content": block} for block in blocks],
    }
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    }

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        logging.info("üîÑ Sending request to OpenRouter at %s", API_URL)
        async with httpx.AsyncClient(timeout=TIMEOUT) as client:
            response = await client.post(API_URL, headers=headers, json=payload)

        logging.info("üîî Response status code: %d", response.status_code)
        data = response.json()
        logging.info("üîç Received JSON keys: %s", list(data.keys()))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        choices = data.get("choices")
        if not isinstance(choices, list) or len(choices) == 0:
            logging.error("‚ùå Unexpected or empty 'choices' in response: %s", data)
            return None

        message = choices[0].get("message")
        if not isinstance(message, dict):
            logging.error("‚ùå Missing 'message' in first choice: %s", choices[0])
            return None

        content = message.get("content")
        if not isinstance(content, str) or not content.strip():
            logging.error("‚ùå Empty or invalid 'content' in message: %s", message)
            return None

        logging.info("‚úÖ Summarization successful, length=%d characters", len(content))
        return content

    except Exception as e:
        logging.exception("‚ùå Exception in summarize_chat: %s", e)
        return None
