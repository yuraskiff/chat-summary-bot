import httpx
import logging
import textwrap
from config.config import OPENROUTER_API_KEY

MODEL = "deepseek/deepseek-chat-v3-0324:free"
API_URL = "https://api.openrouter.ai/api/v1/chat/completions"
TIMEOUT = httpx.Timeout(10.0, read=60.0)

HEADERS = {
    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    "HTTP-Referer": "https://chat-summary-bot.onrender.com",
    "X-Title": "chat-summary-bot",
    "Content-Type": "application/json",
}

async def summarize_chat(chat_history: list[str], user_prompt: str | None = None) -> str | None:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –Ω–∞ –º–æ–¥–µ–ª—å DeepSeek.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    system_msg = "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–æ–≤."
    default_prompt = textwrap.dedent("""
        –°–æ–±–µ—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏ —Å–¥–µ–ª–∞–π –∑–∞–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:
        ‚Äì –¢–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π
        ‚Äì –ö—Ç–æ –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω/–±–µ—Å–ø–æ–ª–µ–∑–µ–Ω –∏ –ø–æ—á–µ–º—É
        ‚Äì –ü–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã –±–µ—Å–µ–¥—ã
        ‚Äì –ö—Ç–æ —á–∞—â–µ –≤—Å–µ—Ö –ø–∏—Å–∞–ª
        ‚Äì –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        ‚Äì –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã
        ‚Äì –ö–æ—Ä–æ—Ç–∫–∞—è —à—É—Ç–∫–∞ –Ω–∞ —Ç–µ–º—É –±–µ—Å–µ–¥—ã
    """).strip()
    prompt = user_prompt or default_prompt

    messages = [{"role": "system", "content": system_msg}]
    messages += [{"role": "user", "content": prompt}]
    messages += [{"role": "user", "content": block} for block in chat_history]

    logging.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º %d –±–ª–æ–∫–æ–≤ –≤ OpenRouter", len(chat_history))

    try:
        async with httpx.AsyncClient(timeout=TIMEOUT) as client:
            response = await client.post(API_URL, headers=HEADERS, json={
                "model": MODEL,
                "messages": messages,
            })
            response.raise_for_status()
            data = response.json()
            logging.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
            return data["choices"][0]["message"]["content"]
    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: %s", e)
        return None
