import os
import ssl
from dotenv import load_dotenv
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, DeclarativeBase
from sqlalchemy import String, Integer, Text
from sqlalchemy.orm import Mapped, mapped_column

load_dotenv()

DATABASE_URL = os.getenv("DATABASE_URL")

# üîê SSL-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Render PostgreSQL
ssl_context = ssl.create_default_context()
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE

# üéØ Async SQLAlchemy engine —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SSL
engine = create_async_engine(
    DATABASE_URL,
    echo=False,
    connect_args={"ssl": ssl_context}
)

# üíæ –°–µ—Å—Å–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ë–î
async_session = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)

# üß± –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –º–æ–¥–µ–ª–µ–π
class Base(DeclarativeBase):
    pass

# üìã –ú–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏
class Summary(Base):
    __tablename__ = "summaries"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    text: Mapped[str] = mapped_column(Text)
    summary: Mapped[str] = mapped_column(Text)

# üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü)
async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# üì• –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ –≤ –±–∞–∑—É
async def save_summary(text: str, summary: str):
    async with async_session() as session:
        session.add(Summary(text=text, summary=summary))
        await session.commit()
