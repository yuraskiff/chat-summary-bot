# --- START OF FILE bot/handlers/admin_handlers.py ---

import io
import logging
from datetime import datetime, timedelta, timezone
from typing import TYPE_CHECKING

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Bot –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
from aiogram import Router, Bot
from aiogram.types import Message, InputFile
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib.utils import simpleSplit
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

from db.db import (
    get_registered_chats,
    get_messages_for_summary,
    get_setting,
    set_setting
)
from api_clients.openrouter import summarize_chat
from config.config import ADMIN_CHAT_ID

# –î–ª—è type hinting, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —Å main.py, –µ—Å–ª–∏ –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
# if TYPE_CHECKING:
#     from aiogram import Dispatcher

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è PDF ---
PDF_FONT = 'Helvetica' # –®—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
PDF_FONT_PATH = 'DejaVuSans.ttf' # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —à—Ä–∏—Ñ—Ç–∞ (–≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)
try:
    pdfmetrics.registerFont(TTFont('DejaVuSans', PDF_FONT_PATH))
    PDF_FONT = 'DejaVuSans' # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —à—Ä–∏—Ñ—Ç, –µ—Å–ª–∏ –æ–Ω –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
    logging.info(f"–®—Ä–∏—Ñ—Ç '{PDF_FONT_PATH}' —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è PDF.")
except Exception as e:
    logging.warning(
        f"–ù–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç '{PDF_FONT_PATH}' ({e}). "
        f"PDF –º–æ–∂–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü—É. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è '{PDF_FONT}'."
    )
# --- –ö–æ–Ω–µ—Ü –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞ ---

router = Router()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º ADMIN_CHAT_ID –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è
if ADMIN_CHAT_ID is None:
    logging.warning("ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω. –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
# –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π MagicFilter F.from_user.id == ADMIN_CHAT_ID
# –ò–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é/–∫–ª–∞—Å—Å-—Ñ–∏–ª—å—Ç—Ä
def is_admin(message: Message) -> bool:
    return ADMIN_CHAT_ID is not None and message.from_user.id == ADMIN_CHAT_ID

@router.message(Command("set_prompt"), is_admin) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä
async def cmd_set_prompt(message: Message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)."""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    new_prompt = message.text.split(maxsplit=1)[1].strip() if ' ' in message.text else ""
    if not new_prompt:
        await message.reply("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: `/set_prompt –°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É:`")
        return

    try:
        await set_setting("summary_prompt", new_prompt)
        await message.reply("‚úÖ –®–∞–±–ª–æ–Ω —Å–≤–æ–¥–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ summary_prompt: {e}")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")


@router.message(Command("chats"), is_admin) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä
async def cmd_chats(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)."""
    try:
        chat_ids = await get_registered_chats()
        if not chat_ids:
            await message.reply("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")
            return

        lines = ["<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã:</b>"]
        for cid in chat_ids:
            try:
                chat_info = await message.bot.get_chat(cid)
                title = chat_info.title or chat_info.full_name or f"ID: {cid}"
                link = f" (<a href='{chat_info.invite_link}'>—Å—Å—ã–ª–∫–∞</a>)" if chat_info.invite_link else ""
                lines.append(f"‚Ä¢ {title} (<code>{cid}</code>){link}")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ {cid}: {e}")
                lines.append(f"‚Ä¢ ID: <code>{cid}</code> (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞?)")

        full_text = "\n".join(lines)
        MAX_LEN = 4096
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        for i in range(0, len(full_text), MAX_LEN):
            await message.reply(full_text[i:i + MAX_LEN], parse_mode="HTML")

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /chats: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤.")


@router.message(Command("pdf"), is_admin) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä
async def cmd_pdf(message: Message):
    """–°–æ–∑–¥–∞–µ—Ç PDF —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)."""
    args = message.text.split()
    if len(args) < 2 or not args[1].lstrip('-').isdigit():
        await message.reply("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: `/pdf -1001234567890`")
        return

    try:
        chat_id_to_fetch = int(args[1])
    except ValueError:
        await message.reply("‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–∞—Ç–∞.")
        return

    try:
        since_time = datetime.now(timezone.utc) - timedelta(days=1)
        logging.info(f"–ó–∞–ø—Ä–æ—Å PDF –¥–ª—è —á–∞—Ç–∞ {chat_id_to_fetch} —Å {since_time}")
        messages_data = await get_messages_for_summary(chat_id_to_fetch, since_time)

        if not messages_data:
            await message.reply(f"–°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ <code>{chat_id_to_fetch}</code> –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(messages_data)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è PDF –≤ —á–∞—Ç–µ {chat_id_to_fetch}.")
        buf = io.BytesIO()
        c = canvas.Canvas(buf, pagesize=letter)
        width, height = letter

        textobject = c.beginText()
        textobject.setTextOrigin(40, height - 40)
        textobject.setFont(PDF_FONT, 8)
        line_height = 10

        for msg in messages_data:
            msg_timestamp = msg["timestamp"]
            if msg_timestamp.tzinfo is None:
                msg_timestamp = msg_timestamp.replace(tzinfo=timezone.utc)
            elif msg_timestamp.tzinfo != timezone.utc:
                msg_timestamp = msg_timestamp.astimezone(timezone.utc)

            msg_time_str = msg_timestamp.strftime('%Y-%m-%d %H:%M:%S UTC')
            sender = msg.get("username", "Unknown User")
            text = msg.get("text", "") or "[–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]" # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

            header = f"[{msg_time_str}] {sender}:"
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º simpleSplit –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            lines = simpleSplit(text, PDF_FONT, 8, width - 80)

            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –º–µ—Å—Ç–∞ + –∑–∞–ø–∞—Å
            required_lines = 1 + len(lines) + 1 # header + text + space
            if textobject.getY() < 40 + line_height * required_lines:
                c.drawText(textobject)
                c.showPage()
                textobject = c.beginText(40, height - 40)
                textobject.setFont(PDF_FONT, 8)

            textobject.textLine(header)
            for line in lines:
                 textobject.textLine(f"  {line}")
            textobject.moveCursor(0, line_height / 2) # –û—Ç—Å—Ç—É–ø

        c.drawText(textobject)
        c.save()
        buf.seek(0)

        pdf_filename = f"history_{chat_id_to_fetch}_{since_time.strftime('%Y%m%d')}.pdf"
        await message.reply_document(
            InputFile(buf, filename=pdf_filename),
            caption=f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ <code>{chat_id_to_fetch}</code> –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞."
        )

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF –¥–ª—è —á–∞—Ç–∞ {chat_id_to_fetch}: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF.")


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ user_handlers.py, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω –ø—Ä–∞–≤
# @router.message(Command("summary"))
# async def cmd_summary_trigger(message: Message):
#     """–°–æ–∑–¥–∞—ë—Ç —Å–∞–º–º–∞—Ä–∏ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∑–∞ 24 —á–∞—Å–∞."""
#     # ...


async def send_summary(bot: Bot, chat_id: int):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É."""
    logging.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    now_aware = datetime.now(timezone.utc)
    since_aware = now_aware - timedelta(days=1)

    logging.info(f"–ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–≤–æ–¥–∫–∏ —á–∞—Ç–∞ {chat_id} —Å {since_aware}")
    try:
        messages_data = await get_messages_for_summary(chat_id, since=since_aware)
        logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages_data)} –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–≤–æ–¥–∫–∏ —á–∞—Ç–∞ {chat_id}: {e}")
        # –ù–µ —Å–ø–∞–º–∏–º –≤ —á–∞—Ç, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
        # await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏.")
        return

    MIN_MESSAGES_FOR_SUMMARY = 5 # –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ config.py
    if not messages_data or len(messages_data) < MIN_MESSAGES_FOR_SUMMARY:
        logging.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π ({len(messages_data)}) –¥–ª—è —Å–≤–æ–¥–∫–∏ –≤ —á–∞—Ç–µ {chat_id}.")
        # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º —á–∞—Ç –æ–± —ç—Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        return

    message_blocks = []
    for m in messages_data:
        msg_timestamp = m["timestamp"]
        if msg_timestamp.tzinfo is None:
            msg_timestamp = msg_timestamp.replace(tzinfo=timezone.utc)
        elif msg_timestamp.tzinfo != timezone.utc:
            msg_timestamp = msg_timestamp.astimezone(timezone.utc)
        ts = msg_timestamp.strftime('%H:%M')
        sender = m.get("username", "Unknown")
        text = m.get("text", "") or "[–ø—É—Å—Ç–æ]"
        MAX_MSG_LEN = 1000 # –õ–∏–º–∏—Ç –¥–ª–∏–Ω—ã –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è OpenAI
        message_blocks.append(f"[{ts}] {sender}: {text[:MAX_MSG_LEN]}")

    default_prompt = "–°–¥–µ–ª–∞–π –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É (summary) —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞. –í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã. –û—Ç–≤–µ—Ç –¥–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    try:
        summary_prompt = await get_setting("summary_prompt") or default_prompt
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ summary_prompt: {e}")
        summary_prompt = default_prompt

    logging.info(f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(message_blocks)} –±–ª–æ–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ OpenAI –¥–ª—è —á–∞—Ç–∞ {chat_id}...")
    try:
        summary_text = await summarize_chat(message_blocks, system_prompt=summary_prompt)
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–∞—Ç –æ–± –æ—à–∏–±–∫–µ, –Ω–æ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π
        try: await bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏.")
        except Exception: pass
        return

    if not summary_text:
        logging.warning(f"OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—É—é —Å–≤–æ–¥–∫—É –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
        # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞
        return

    try:
        full_summary_text = f"üìù <b>–°–≤–æ–¥–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n\n{summary_text}"
        MAX_LEN = 4096
        for i in range(0, len(full_summary_text), MAX_LEN):
            await bot.send_message(chat_id, full_summary_text[i:i + MAX_LEN], parse_mode="HTML")
        logging.info(f"‚úÖ –°–≤–æ–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id}")
        await set_setting(f"last_summary_ts_{chat_id}", now_aware.isoformat())
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")


def setup_scheduler(bot: Bot):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–æ–∫."""
    scheduler = AsyncIOScheduler(timezone="UTC")
    try:
        scheduler.add_job(
            trigger_all_summaries,
            trigger="cron",
            hour=21, # 21:00 UTC
            minute=0,
            args=[bot],
            id="daily_summaries",
            replace_existing=True,
            misfire_grace_time=300 # –î–∞–µ–º 5 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏
        )
        scheduler.start()
        logging.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–≤–æ–¥–æ–∫ –≤ {scheduler.get_job('daily_summaries').next_run_time.strftime('%Y-%m-%d %H:%M:%S %Z')}.")
    except Exception as e:
        logging.exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {e}")


async def trigger_all_summaries(bot: Bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–≤–æ–¥–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤."""
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–≤–æ–¥–æ–∫...")
    try:
        registered_chats = await get_registered_chats()
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(registered_chats)} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Å–≤–æ–¥–∫–∏.")
        current_time = datetime.now(timezone.utc)

        for chat_id in registered_chats:
            should_send = True
            try:
                last_summary_ts_str = await get_setting(f"last_summary_ts_{chat_id}")
                if last_summary_ts_str:
                    last_summary_time = datetime.fromisoformat(last_summary_ts_str)
                    if last_summary_time.tzinfo is None:
                        last_summary_time = last_summary_time.replace(tzinfo=timezone.utc)
                    elif last_summary_time.tzinfo != timezone.utc:
                        last_summary_time = last_summary_time.astimezone(timezone.utc)

                    # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–æ–¥–∫–∞ –±—ã–ª–∞ –º–µ–Ω–µ–µ 23 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
                    if current_time - last_summary_time < timedelta(hours=23):
                        should_send = False
                        logging.info(f"–ü—Ä–æ–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–≤–æ–¥–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}, —Ç.–∫. –ø–æ—Å–ª–µ–¥–Ω—è—è –±—ã–ª–∞ –≤ {last_summary_time.isoformat()}.")
            except ValueError:
                logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–æ–¥–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {last_summary_ts_str}")
            except Exception as e:
                logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–æ–¥–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")

            if should_send:
                logging.info(f"–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Å–≤–æ–¥–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}...")
                try:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API/DB
                    await send_summary(bot, chat_id)
                except Exception as e:
                    logging.exception(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ send_summary –¥–ª—è —á–∞—Ç–∞ {chat_id} –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            # else: # –õ–æ–≥ –ø—Ä–æ–ø—É—Å–∫–∞ —É–∂–µ –µ—Å—Ç—å –≤—ã—à–µ
            #    logging.info(f"–°–≤–æ–¥–∫–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} –ø—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ —É—Å–ª–æ–≤–∏—é –≤—Ä–µ–º–µ–Ω–∏.")

    except Exception as e:
        logging.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ trigger_all_summaries: {e}")
    finally:
        logging.info("üèÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–≤–æ–¥–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# --- END OF FILE admin_handlers.py ---
