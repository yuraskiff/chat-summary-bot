# --- START OF FILE bot/handlers/admin_handlers.py ---

import io
import logging
from datetime import datetime, timedelta, timezone
# ... –¥—Ä—É–≥–∏–µ –∏–º–ø–æ—Ä—Ç—ã ...
from aiogram import Router, Bot
from aiogram.types import Message, InputFile
from aiogram.filters import Command
# ... –¥—Ä—É–≥–∏–µ –∏–º–ø–æ—Ä—Ç—ã ...

from db.db import (
    get_registered_chats,
    get_messages_for_summary
    # –£–ë–ò–†–ê–ï–ú get_setting, set_setting, –µ—Å–ª–∏ –æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã
    # get_setting,
    # set_setting
)
from api_clients.openrouter import summarize_chat
from config.config import ADMIN_CHAT_ID

# ... (–∫–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞ PDF) ...

router = Router()

# ... (–ü—Ä–æ–≤–µ—Ä–∫–∞ ADMIN_CHAT_ID –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ) ...
# ... (–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ADMIN_FILTER, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–ª—è /chats, /pdf) ...

# --- –£–î–ê–õ–ò–¢–¨ –ò–õ–ò –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨ –•–≠–ù–î–õ–ï–† CMD_SET_PROMPT ---
# @router.message(Command("set_prompt")) # –£–±—Ä–∞–ª–∏ —Ñ–∏–ª—å—Ç—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–∏
# async def cmd_set_prompt(message: Message):
#     logging.debug(f"–•—ç–Ω–¥–ª–µ—Ä /set_prompt –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}.")
#     if not isinstance(ADMIN_CHAT_ID, int) or message.from_user.id != ADMIN_CHAT_ID:
#         logging.warning(f"–î–æ—Å—Ç—É–ø –∫ /set_prompt –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è user {message.from_user.id}.")
#         return
#     logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} (–ê–î–ú–ò–ù) –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç /set_prompt")
#     new_prompt = message.text.split(maxsplit=1)[1].strip() if ' ' in message.text else ""
#     if not new_prompt:
#         await message.reply("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: `/set_prompt –°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É:`")
#         return
#     try:
#         # await set_setting("summary_prompt", new_prompt) # –ë–æ–ª—å—à–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
#         await message.reply("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /set_prompt –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.") # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     except Exception as e:
#         logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /set_prompt: {e}")
#         await message.reply("‚ùå –û—à–∏–±–∫–∞.")


# --- –•—ç–Ω–¥–ª–µ—Ä—ã /chats –∏ /pdf (–æ—Å—Ç–∞—é—Ç—Å—è —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π) ---
@router.message(Command("chats"))
async def cmd_chats(message: Message):
    # ... (–∫–æ–¥ cmd_chats —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π) ...

@router.message(Command("pdf"))
async def cmd_pdf(message: Message):
    # ... (–∫–æ–¥ cmd_pdf —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π) ...


# --- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ (–ò–ó–ú–ï–ù–ï–ù–ê) ---
async def send_summary(bot: Bot, chat_id: int):
    logging.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    now_aware = datetime.now(timezone.utc)
    since_aware = now_aware - timedelta(days=1)

    logging.info(f"–ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–≤–æ–¥–∫–∏ —á–∞—Ç–∞ {chat_id} —Å {since_aware.isoformat()}")
    try:
        messages_data = await get_messages_for_summary(chat_id, since=since_aware)
        logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages_data)} –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–≤–æ–¥–∫–∏ —á–∞—Ç–∞ {chat_id}: {e}")
        return

    MIN_MESSAGES_FOR_SUMMARY = 5
    if not messages_data or len(messages_data) < MIN_MESSAGES_FOR_SUMMARY:
        logging.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π ({len(messages_data)}) –¥–ª—è —Å–≤–æ–¥–∫–∏ –≤ —á–∞—Ç–µ {chat_id}.")
        return

    message_blocks = []
    for m in messages_data:
        # ... (–∫–æ–¥ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è) ...
        msg_timestamp = m["timestamp"]
        if msg_timestamp.tzinfo is None: msg_timestamp = msg_timestamp.replace(tzinfo=timezone.utc)
        elif msg_timestamp.tzinfo != timezone.utc: msg_timestamp = msg_timestamp.astimezone(timezone.utc)
        ts = msg_timestamp.strftime('%H:%M')
        sender = m.get("username", "Unknown")
        text = m.get("text", "") or "[–ø—É—Å—Ç–æ]"
        MAX_MSG_LEN = 1000
        message_blocks.append(f"[{ts}] {sender}: {text[:MAX_MSG_LEN]}")

    # ----> –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –¢–û–õ–¨–ö–û –û–î–ò–ù –ü–†–û–ú–ü–¢ <----
    # –ó–∞–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ –Ω–∞ –≤–∞—à –∂–µ–ª–∞–µ–º—ã–π –ø—Ä–æ–º–ø—Ç
    summary_prompt = """
–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É (summary) —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.
–í–∫–ª—é—á–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã:
1.  **–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:** –ü–µ—Ä–µ—á–∏—Å–ª–∏ 2-3 –≥–ª–∞–≤–Ω—ã–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Å—É–∂–¥–∞–ª–∏—Å—å.
2.  **–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã/–†–µ—à–µ–Ω–∏—è:** –ë—ã–ª–∏ –ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –∫–∞–∫–∏–µ-—Ç–æ —Ä–µ—à–µ–Ω–∏—è –∏–ª–∏ –æ–∑–≤—É—á–µ–Ω—ã –≤–∞–∂–Ω—ã–µ –∏–¥–µ–∏?
3.  **–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:** –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ –æ–±—â—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —á–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–µ–ª–æ–≤–∞—è, –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è, –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–∞—è).
–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ë—É–¥—å –ª–∞–∫–æ–Ω–∏—á–µ–Ω.
    """.strip()
    logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
    # ----> –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø <----

    logging.info(f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(message_blocks)} –±–ª–æ–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ OpenAI –¥–ª—è —á–∞—Ç–∞ {chat_id}...")
    summary_text = None
    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        summary_text = await summarize_chat(message_blocks, system_prompt=summary_prompt)
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        try: await bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏.")
        except Exception: pass
        return

    if not summary_text:
        logging.warning(f"OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—É—é —Å–≤–æ–¥–∫—É –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
        return

    try:
        full_summary_text = f"üìù <b>–°–≤–æ–¥–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n\n{summary_text}"
        MAX_LEN = 4096
        for i in range(0, len(full_summary_text), MAX_LEN):
            await bot.send_message(chat_id, full_summary_text[i:i + MAX_LEN], parse_mode="HTML")
        logging.info(f"‚úÖ –°–≤–æ–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id}")
        # –£–±—Ä–∞–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–æ–¥–∫–∏, —Ç.–∫. set_setting –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
        # await set_setting(f"last_summary_ts_{chat_id}", now_aware.isoformat())
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
# (–∫–æ–¥ setup_scheduler –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def setup_scheduler(bot: Bot):
    # ...

# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–≤–æ–¥–æ–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é ---
# (–∫–æ–¥ trigger_all_summaries –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ù–û —Ç–µ–ø–µ—Ä—å –æ–Ω –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å last_summary_ts)
async def trigger_all_summaries(bot: Bot):
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–≤–æ–¥–æ–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...")
    try:
        registered_chats = await get_registered_chats()
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(registered_chats)} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏.")
        if not registered_chats:
            logging.info("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤, —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return

        # –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–æ–¥–∫–∏, —Ç.–∫. –±–æ–ª—å—à–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        # current_time = datetime.now(timezone.utc)

        for chat_id in registered_chats:
            # should_send = True
            # ... (–∫–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω) ...

            # if should_send: # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            logging.info(f"–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}...")
            try:
                await send_summary(bot, chat_id)
            except Exception as e:
                logging.exception(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ send_summary –¥–ª—è —á–∞—Ç–∞ {chat_id} –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")

    except Exception as e:
        logging.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ trigger_all_summaries: {e}")
    finally:
        logging.info("üèÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–≤–æ–¥–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# --- END OF FILE admin_handlers.py ---
